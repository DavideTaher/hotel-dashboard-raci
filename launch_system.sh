#!/bin/bash

# ============================================================================
# üöÄ LANZADOR SISTEMA COMPLETO - HOTEL DASHBOARD RACI
# ============================================================================

# Configuraci√≥n
BASE_DIR="$HOME/hotel_dashboard_raci"
LOG_FILE="$BASE_DIR/logs/system_$(date +%Y%m%d).log"

# Funci√≥n de logging
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Funci√≥n para verificar si un puerto est√° ocupado
check_port() {
    local port=$1
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null ; then
        return 0  # Puerto ocupado
    else
        return 1  # Puerto libre
    fi
}

# Funci√≥n para mostrar estado de servicios
show_status() {
    echo ""
    echo "üìä ESTADO DE SERVICIOS:"
    echo "======================="
    
    # Dashboard local
    if check_port 8080; then
        echo "‚úÖ Dashboard (puerto 8080): FUNCIONANDO"
    else
        echo "‚ùå Dashboard (puerto 8080): DETENIDO"
    fi
    
    # Upload server
    if check_port 5001; then
        echo "‚úÖ Upload Server (puerto 5001): FUNCIONANDO"
    else
        echo "‚ùå Upload Server (puerto 5001): DETENIDO"
    fi
    
    # Verificar logs recientes
    if [ -f "$LOG_FILE" ]; then
        local last_log=$(tail -1 "$LOG_FILE" 2>/dev/null)
        echo "üìù √öltimo log: $last_log"
    fi
    
    # Verificar procesos de automatizaci√≥n
    local auto_processes=$(pgrep -f "automation_7x_system.py" | wc -l)
    echo "ü§ñ Procesos automatizaci√≥n: $auto_processes"
    
    echo ""
}

# Funci√≥n para iniciar servicios
start_services() {
    log "üöÄ INICIANDO SERVICIOS DEL SISTEMA"
    
    cd "$BASE_DIR"
    
    # 1. Iniciar dashboard local
    if ! check_port 8080; then
        log "üìä Iniciando dashboard local (puerto 8080)..."
        cd frontend_local
        python3 start_server.py &
        echo $! > ../logs/dashboard.pid
        cd ..
        sleep 2
        
        if check_port 8080; then
            log "‚úÖ Dashboard iniciado correctamente"
        else
            log "‚ùå Error iniciando dashboard"
        fi
    else
        log "‚úÖ Dashboard ya est√° funcionando"
    fi
    
    # 2. Iniciar upload server
    if ! check_port 5001; then
        log "üì§ Iniciando upload server (puerto 5001)..."
        python3 upload_server.py &
        echo $! > logs/upload.pid
        sleep 2
        
        if check_port 5001; then
            log "‚úÖ Upload server iniciado correctamente"
        else
            log "‚ùå Error iniciando upload server"
        fi
    else
        log "‚úÖ Upload server ya est√° funcionando"
    fi
    
    # 3. Verificar sistema de automatizaci√≥n
    log "ü§ñ Verificando sistema de automatizaci√≥n..."
    python3 automation_7x_system.py run-once &
    local auto_pid=$!
    
    # Esperar un momento para verificar
    sleep 3
    if kill -0 $auto_pid 2>/dev/null; then
        log "‚úÖ Sistema de automatizaci√≥n funcionando"
        wait $auto_pid  # Esperar a que termine
    else
        log "‚ùå Error en sistema de automatizaci√≥n"
    fi
    
    log "üéØ TODOS LOS SERVICIOS INICIADOS"
}

# Funci√≥n para detener servicios
stop_services() {
    log "üõë DETENIENDO SERVICIOS DEL SISTEMA"
    
    # Detener dashboard
    if [ -f "$BASE_DIR/logs/dashboard.pid" ]; then
        local pid=$(cat "$BASE_DIR/logs/dashboard.pid")
        if kill -0 $pid 2>/dev/null; then
            kill $pid
            log "‚úÖ Dashboard detenido"
        fi
        rm -f "$BASE_DIR/logs/dashboard.pid"
    fi
    
    # Detener upload server
    if [ -f "$BASE_DIR/logs/upload.pid" ]; then
        local pid=$(cat "$BASE_DIR/logs/upload.pid")
        if kill -0 $pid 2>/dev/null; then
            kill $pid
            log "‚úÖ Upload server detenido"
        fi
        rm -f "$BASE_DIR/logs/upload.pid"
    fi
    
    # Detener procesos de automatizaci√≥n
    pkill -f "automation_7x_system.py" 2>/dev/null
    log "‚úÖ Procesos de automatizaci√≥n detenidos"
    
    log "üéØ TODOS LOS SERVICIOS DETENIDOS"
}

# Funci√≥n para reiniciar servicios
restart_services() {
    log "üîÑ REINICIANDO SERVICIOS DEL SISTEMA"
    stop_services
    sleep 2
    start_services
}

# Funci√≥n para ejecutar backup completo
run_backup() {
    log "üíæ EJECUTANDO BACKUP COMPLETO"
    cd "$BASE_DIR"
    ./auto_backup.sh backup
    if [ $? -eq 0 ]; then
        log "‚úÖ Backup completado exitosamente"
    else
        log "‚ùå Error en backup"
    fi
}

# Funci√≥n para testing completo
run_testing() {
    log "üß™ EJECUTANDO TESTING COMPLETO"
    
    cd "$BASE_DIR"
    
    # Test 1: Verificar archivos principales
    local files=("automation_7x_system.py" "auto_backup.sh" "components_memory_system.sh")
    for file in "${files[@]}"; do
        if [ -f "$file" ]; then
            log "‚úÖ Archivo encontrado: $file"
        else
            log "‚ùå Archivo faltante: $file"
        fi
    done
    
    # Test 2: Verificar componentes
    local component_count=$(ls -1 components_memory/*.md 2>/dev/null | wc -l)
    log "üìÅ Componentes encontrados: $component_count/10"
    
    # Test 3: Test de automatizaci√≥n
    log "ü§ñ Testing sistema de automatizaci√≥n..."
    python3 automation_7x_system.py run-once
    if [ $? -eq 0 ]; then
        log "‚úÖ Sistema de automatizaci√≥n funcionando"
    else
        log "‚ùå Error en sistema de automatizaci√≥n"
    fi
    
    # Test 4: Verificar configuraci√≥n
    if [ -f "automation_config.json" ]; then
        log "‚úÖ Configuraci√≥n encontrada"
    else
        log "‚ùå Configuraci√≥n faltante"
    fi
    
    log "üéØ TESTING COMPLETADO"
}

# Funci√≥n de men√∫ interactivo
show_menu() {
    clear
    echo "üè® HOTEL DASHBOARD RACI - SISTEMA DE CONTROL"
    echo "============================================="
    echo "üìÖ $(date '+%Y-%m-%d %H:%M:%S')"
    echo ""
    show_status
    echo "OPCIONES DISPONIBLES:"
    echo "===================="
    echo "1. üöÄ Iniciar todos los servicios"
    echo "2. üõë Detener todos los servicios"  
    echo "3. üîÑ Reiniciar servicios"
    echo "4. üìä Ver estado detallado"
    echo "5. üíæ Ejecutar backup completo"
    echo "6. ü§ñ Ejecutar automatizaci√≥n manual"
    echo "7. üß™ Ejecutar testing completo"
    echo "8. üìù Ver logs recientes"
    echo "9. ‚öôÔ∏è Configurar cron (automatizaci√≥n)"
    echo "0. ‚ùå Salir"
    echo ""
    echo -n "Selecciona una opci√≥n [0-9]: "
}

# Funci√≥n principal
main() {
    # Crear directorio de logs si no existe
    mkdir -p "$BASE_DIR/logs"
    
    # Si se pasa argumento, ejecutar directamente
    case "$1" in
        "start")
            start_services
            ;;
        "stop")
            stop_services
            ;;
        "restart")
            restart_services
            ;;
        "status")
            show_status
            ;;
        "backup")
            run_backup
            ;;
        "test")
            run_testing
            ;;
        "auto")
            cd "$BASE_DIR"
            python3 automation_7x_system.py run-once
            ;;
        *)
            # Men√∫ interactivo
            while true; do
                show_menu
                read -r choice
                
                case $choice in
                    1)
                        start_services
                        echo ""
                        echo "Presiona Enter para continuar..."
                        read -r
                        ;;
                    2)
                        stop_services
                        echo ""
                        echo "Presiona Enter para continuar..."
                        read -r
                        ;;
                    3)
                        restart_services
                        echo ""
                        echo "Presiona Enter para continuar..."
                        read -r
                        ;;
                    4)
                        show_status
                        echo ""
                        echo "Presiona Enter para continuar..."
                        read -r
                        ;;
                    5)
                        run_backup
                        echo ""
                        echo "Presiona Enter para continuar..."
                        read -r
                        ;;
                    6)
                        cd "$BASE_DIR"
                        python3 automation_7x_system.py run-once
                        echo ""
                        echo "Presiona Enter para continuar..."
                        read -r
                        ;;
                    7)
                        run_testing
                        echo ""
                        echo "Presiona Enter para continuar..."
                        read -r
                        ;;
                    8)
                        echo ""
                        echo "üìù LOGS RECIENTES:"
                        echo "=================="
                        tail -20 "$LOG_FILE" 2>/dev/null || echo "No hay logs disponibles"
                        echo ""
                        echo "Presiona Enter para continuar..."
                        read -r
                        ;;
                    9)
                        echo ""
                        echo "‚öôÔ∏è CONFIGURANDO AUTOMATIZACI√ìN CRON..."
                        if [ -f "$BASE_DIR/setup_cron.sh" ]; then
                            cd "$BASE_DIR"
                            ./setup_cron.sh
                        else
                            echo "‚ùå Script setup_cron.sh no encontrado"
                        fi
                        echo ""
                        echo "Presiona Enter para continuar..."
                        read -r
                        ;;
                    0)
                        log "üëã Sistema de control finalizado"
                        echo "¬°Hasta luego!"
                        exit 0
                        ;;
                    *)
                        echo "‚ùå Opci√≥n inv√°lida. Intenta de nuevo."
                        sleep 1
                        ;;
                esac
            done
            ;;
    esac
}

# Verificar que estamos en el directorio correcto
if [ ! -d "$BASE_DIR" ]; then
    echo "‚ùå Error: Directorio $BASE_DIR no existe"
    echo "Aseg√∫rate de que el proyecto est√© en ~/hotel_dashboard_raci/"
    exit 1
fi

# Ejecutar funci√≥n principal
main "$@"
